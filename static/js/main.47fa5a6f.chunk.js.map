{"version":3,"sources":["components/create-query.js","components/loading.js","api.js","components/power-plants.js","util.js","components/line-graph.js","components/cluster-controller-graph.js","components/label-colors.js","components/inverter-graph.js","components/power-plant.js","app.js","registerServiceWorker.js","index.js"],"names":["createQuery","query","Children","_Component","_class2","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetch","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","sent","setState","t0","console","error","concat","loading","stop","state","undefined","inherits","createClass","key","value","react_default","createElement","assign","Component","Loading","Message","negative","Header","Button","onClick","onRetry","children","sendQuery","_x","_x2","_sendQuery","apply","arguments","variables","res","text","_res","process","method","body","JSON","stringify","headers","Content-Type","parse","errors","Error","abrupt","POWER_PLANTS_QUERY","_callee2","_context2","data","powerPlants","POWER_PLANT_QUERY","_callee3","plantId","_context3","powerPlant","ENERGY_LOGS_QUERY","parseEnergyLog","log","energy","power","current","voltage","leakage","parseFloat","isNaN","getEnergyLogs","_x4","_getEnergyLogs","_callee4","args","where","limit","_res$data$energyLogs","count","_context4","energyLogs","map","d","PowerPlants","onClickPowerPlantLink","e","preventDefault","history","push","_this2","length","List","divided","relaxed","plant","i","Item","Content","as","id","Description","devices","device","j","model","defaultProps","_getPowerPlants","DATE_FORMAT","formatDate","secs","moment","tz","format","DEFAULT_PROPS","canvas","width","height","backgroundColor","background","top","left","showYLabel","showYLine","yLineWidth","yLineColor","yAxisAt","yAxisWidth","yLabelFont","yLabelColor","renderYLabel","y","Math","round","yInterval","showXLabel","showXLine","xLineWidth","xLineColor","xAxisAt","xAxisHeight","xLabelFont","xLabelColor","renderXLabel","x","util","xInterval","graph","line","color","ui","xLabelAt","xLabelWidth","xLabelHeight","xLabelBackgroundColor","yLabelAt","yLabelWidth","yLabelHeight","yLabelBackgroundColor","yMin","Number","POSITIVE_INFINITY","yMax","NEGATIVE_INFINITY","xMin","xMax","lines","lineColors","LineGraph","index_es","drawBackground","ctx","fillCanvas","draw","objectSpread","drawData","X_MIN","X_MAX","GRAPH_PROPS","ClusterControllerGraph","fetchEnergyLogs","_ref2","lineData","api","slice","unixTime","max","toConsumableArray","min","floor","reverse","onMouseMove","mouse","_this$state$data","isInsideRect","math","linear","dy","dx","y0","getNearestDataAtX","mouseX","mouseY","point","onMouseOut","padding","_this$state$data2","Segment","inverted","style","position","line_graph","drawUI","drawPointAt","radius","ambientColor","borderColor","getLeft","transition","getTransition","zIndex","border","LabelColors","display","flexDirection","alignItems","labels","label","margin","colors","LINE_COLORS","Y_MIN","Y_MAX","InverterGraph","LIMIT","_this$props","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_ref4","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_arr","_i","_ref5","_ref3","val","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","l","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","_l","Symbol","iterator","done","deviceId","return","finish","t1","entries","slicedToArray","t2","t3","t4","graphKey","_this$state$graph$gra","points","defineProperty","deviceIds","label_colors","PowerPlant","toggleShowDevices","showDevices","basic","size","cluster_controller_graph","inverter_graph","filter","_x3","_getPowerPlant","match","params","NotFound","App","Container","paddingTop","Switch","Route","path","component","exact","paddingBottom","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","BrowserRouter","app","document","getElementById","URL","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.47fa5a6f.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default function createQuery(query) {\n  return (Children) => class extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        loading: true,\n        error: \"\",\n        response: undefined\n      }\n    }\n\n    fetch = async () => {\n      try {\n        const response = await query(this.props)\n        this.setState({response})\n      } catch (error) {\n        console.error(error)\n        this.setState({error: `${error}`})\n      }\n\n      this.setState({loading: false})\n    }\n\n    componentDidMount() {\n      this.fetch()\n    }\n\n    render() {\n      return (\n        <Children fetch={this.fetch} query={this.state} {...this.props}/>\n      )\n    }\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {Message, Button} from 'semantic-ui-react'\n\nclass Loading extends Component {\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.any,\n    children: PropTypes.node,\n    onRetry: PropTypes.func.isRequired,\n  }\n\n  render() {\n    if (this.props.loading) {\n      return <div>Loading...</div>\n    }\n\n    if (this.props.error) {\n      return (\n        <Message negative>\n          <Message.Header>Error</Message.Header>\n          <p>{`${this.props.error}`}</p>\n          <Button onClick={this.props.onRetry}>\n            Retry\n          </Button>\n        </Message>\n      )\n    }\n\n    return this.props.children\n  }\n}\n\nexport default Loading\n","export async function sendQuery (query, variables) {\n  const res = await fetch(process.env.REACT_APP_ENERGY_LOGS_URL, {\n    method: 'POST',\n    body: JSON.stringify({\n      query,\n      variables\n    }),\n    headers: { 'Content-Type': 'application/json' }\n  })\n\n  const text = await res.text()\n\n  try {\n    const res = JSON.parse(text)\n\n    if (res.errors) {\n      throw new Error(res.errors)\n    }\n\n    return res\n  } catch (error) {\n    console.error('Text:', text)\n    throw error\n  }\n}\n\nconst POWER_PLANTS_QUERY = `\n  query {\n    powerPlants {\n      id\n      devices {\n        id\n        model\n      }\n    }\n  }\n`\nexport async function getPowerPlants() {\n  const res = await sendQuery(POWER_PLANTS_QUERY)\n  return res.data.powerPlants\n}\n\nconst POWER_PLANT_QUERY = `\n  query PowerPlant($plantId: String!){\n    powerPlant(plantId: $plantId) {\n      id\n      devices {\n        id\n        model\n      }\n    }\n  }\n`\nexport async function getPowerPlant(plantId) {\n  const res = await sendQuery(POWER_PLANT_QUERY, {plantId})\n  return res.data.powerPlant\n}\n\nconst ENERGY_LOGS_QUERY = `\n  query EnergyLogs($where: EnergyLogsWhereInput!, $limit: Int!) {\n    energyLogs(where: $where, limit: $limit) {\n      count\n      data {\n        model\n        deviceId\n        energy\n        power\n        current\n        voltage\n        leakage\n        unixTime\n      }\n    }\n  }\n`\n\nfunction parseEnergyLog(log) {\n  let {\n    energy,\n    power,\n    current,\n    voltage,\n    leakage,\n  } = log\n\n  energy = parseFloat(energy)\n  power = parseFloat(power)\n  current = parseFloat(current)\n  voltage = parseFloat(voltage)\n  leakage = parseFloat(leakage)\n\n  log.energy = isNaN(energy) ? 0 : energy\n  log.power = isNaN(power) ? 0 : power\n  log.current = isNaN(current) ? 0 : current\n  log.voltage = isNaN(voltage) ? 0 : voltage\n  log.leakage = isNaN(leakage) ? 0 : leakage\n\n  return log\n}\n\nexport async function getEnergyLogs(args) {\n  const {\n    where,\n    limit\n  } = args\n\n  const res = await sendQuery(ENERGY_LOGS_QUERY, {\n    where,\n    limit,\n  })\n\n  const {count, data} = res.data.energyLogs\n\n  return {\n    count,\n    data: data.map(d => parseEnergyLog(d))\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {List} from 'semantic-ui-react'\nimport createQuery from './create-query'\nimport Loading from './loading'\nimport * as api from '../api'\n\nclass PowerPlants extends Component {\n  static propTypes = {\n    query: PropTypes.shape({\n      loading: PropTypes.bool.isRequired,\n      error: PropTypes.string.isRequired,\n      response: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        devices: PropTypes.arrayOf(PropTypes.shape({\n          id: PropTypes.string.isRequired,\n          model: PropTypes.string.isRequired,\n        }))\n      }))\n    }).isRequired,\n    fetch: PropTypes.func.isRequired,\n    history: PropTypes.shape({\n      push: PropTypes.func.isRequired,\n    }),\n  }\n\n  static defaultProps = {\n  }\n\n  onClickPowerPlantLink = (e, plantId) => {\n    e.preventDefault()\n    this.props.history.push(`/plants/${plantId}`)\n  }\n\n  render() {\n    const {response} = this.props.query\n\n    return (\n      <Loading {...this.props.query} onRetry={this.props.fetch}>\n        {response ? (\n          <div>\n            <h3>Plants ({response.length})</h3>\n            <List divided relaxed>\n              {response.map((plant, i) => (\n                <List.Item key={i}>\n                  <List.Content>\n                    <List.Header as='a' onClick={e => this.onClickPowerPlantLink(e, plant.id)}>\n                      Plant {plant.id}\n                    </List.Header>\n                    <List.Description>Devices ({plant.devices.length})</List.Description>\n                    {plant.devices.map((device, j) => (\n                      <List.Description key={j}>\n                        {device.model} - {device.id}\n                      </List.Description>\n                    ))}\n                  </List.Content>\n                </List.Item>\n              ))}\n            </List>\n          </div>\n        ) : <div>No Power plants</div>}\n      </Loading>\n    )\n  }\n}\n\nexport default createQuery(api.getPowerPlants)(PowerPlants)\n","import moment from 'moment-timezone'\n\nconst DATE_FORMAT = 'YYYY-MM-DD HH:mm'\n\nexport function formatDate (secs) {\n  return moment.tz(secs * 1000, process.env.REACT_APP_TIME_ZONE).format(DATE_FORMAT)\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {canvas, GraphCanvas} from 'react-canvas-graph'\nimport * as util from '../util'\n\nconst DEFAULT_PROPS = {\n  canvas: {\n    width: 900,\n    height: 300,\n    backgroundColor: \"white\"\n  },\n  background: {\n    top: 10,\n    left: 10,\n    width: 880,\n    height: 280,\n    backgroundColor: 'white',\n\n    showYLabel: true,\n    showYLine: true,\n    yLineWidth: 1,\n    yLineColor: 'grey',\n    yAxisAt: 'left',\n    yAxisWidth: 50,\n    yLabelFont: '12px Arial',\n    yLabelColor: 'black',\n    renderYLabel: y => Math.round(y),\n    yInterval: 1,\n\n    showXLabel: true,\n    showXLine: true,\n    xLineWidth: 1,\n    xLineColor: 'grey',\n    xAxisAt: 'bottom',\n    xAxisHeight: 50,\n    xLabelFont: '12px Arial',\n    xLabelColor: 'black',\n    renderXLabel: x => util.formatDate(x),\n    xInterval: 1,\n  },\n  graph: {\n     left: 60,\n     top: 10,\n     width: 830,\n     height: 230,\n  },\n  line: {\n    color: 'orange',\n    width: 1\n  },\n  ui: {\n    showXLabel: true,\n    showXLine: true,\n    xLineColor: 'green',\n    xLabelAt: 'bottom',\n    xLabelWidth: 110,\n    xLabelHeight: 20,\n    xLabelBackgroundColor: 'black',\n    xLabelFont: '12px Arial',\n    xLabelColor: 'white',\n    renderXLabel: x => util.formatDate(x),\n\n    showYLabel: true,\n    showYLine: true,\n    yLineColor: 'green',\n    yLabelAt: 'left',\n    yLabelWidth: 50,\n    yLabelHeight: 20,\n    yLabelBackgroundColor: 'black',\n    yLabelFont: '12px Arial',\n    yLabelColor: 'white',\n    renderYLabel: y => Math.round(y),\n  },\n  yMin: Number.POSITIVE_INFINITY,\n  yMax: Number.NEGATIVE_INFINITY,\n  xMin: Number.POSITIVE_INFINITY,\n  xMax: Number.NEGATIVE_INFINITY,\n  xInterval: 1,\n  yInterval: 1,\n  lines: [],\n  lineColors: [],\n}\n\nclass LineGraph extends Component {\n  // TODO\n  static propTypes = {\n  }\n\n  static defaultProps = DEFAULT_PROPS\n\n  render() {\n    const {\n      lines,\n    } = this.props\n\n    return (\n      <GraphCanvas\n        canvas={this.props.canvas}\n        drawBackground={(ctx) => {\n          canvas.background.fillCanvas(ctx, this.props)\n          canvas.background.draw(ctx, {\n            ...this.props,\n            background: {\n              ...this.props.background,\n              xInterval: this.props.xInterval,\n              yInterval: this.props.yInterval,\n            }\n          })\n        }}\n        drawData={(ctx) => {\n          for (let i = 0; i < lines.length; i++) {\n            canvas.line.draw(ctx, {\n              ...this.props,\n              line: {\n                ...this.props.line,\n                color: this.props.lineColors[i] || \"black\",\n              },\n              data: lines[i],\n            })\n          }\n        }}\n        {...this.props}\n      />\n    )\n  }\n}\n\nexport default LineGraph\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Segment } from 'semantic-ui-react'\nimport {canvas} from 'react-canvas-graph'\nimport LineGraph from './line-graph'\nimport * as api from '../api'\nimport * as util from '../util'\n\nconst X_MIN = Number.POSITIVE_INFINITY\nconst X_MAX = Number.NEGATIVE_INFINITY\nconst Y_MIN = Number.POSITIVE_INFINITY\nconst Y_MAX = Number.NEGATIVE_INFINITY\n\nconst GRAPH_PROPS = {\n  canvas: {\n    width: 900,\n    height: 300,\n    backgroundColor: \"white\"\n  },\n  background: {\n    top: 10,\n    left: 10,\n    width: 880,\n    height: 280,\n    backgroundColor: 'white',\n\n    showYLabel: true,\n    showYLine: true,\n    yLineWidth: 1,\n    yLineColor: 'grey',\n    yAxisAt: 'left',\n    yAxisWidth: 50,\n    yLabelFont: '12px Arial',\n    yLabelColor: 'black',\n    renderYLabel: y => Math.round(y),\n    yInterval: 1,\n\n    showXLabel: true,\n    showXLine: true,\n    xLineWidth: 1,\n    xLineColor: 'grey',\n    xAxisAt: 'bottom',\n    xAxisHeight: 50,\n    xLabelFont: '12px Arial',\n    xLabelColor: 'black',\n    renderXLabel: x => util.formatDate(x),\n    xInterval: 1\n  },\n  graph: {\n     left: 60,\n     top: 10,\n     width: 830,\n     height: 230,\n  },\n  line: {\n    color: 'orange',\n    width: 2\n  },\n  ui: {\n    showXLabel: true,\n    showXLine: true,\n    xLineColor: 'green',\n    xLabelAt: 'bottom',\n    xLabelWidth: 110,\n    xLabelHeight: 20,\n    xLabelBackgroundColor: 'black',\n    xLabelFont: '12px Arial',\n    xLabelColor: 'white',\n    renderXLabel: x => util.formatDate(x),\n\n    showYLabel: true,\n    showYLine: true,\n    yLineColor: 'green',\n    yLabelAt: 'left',\n    yLabelWidth: 50,\n    yLabelHeight: 20,\n    yLabelBackgroundColor: 'black',\n    yLabelFont: '12px Arial',\n    yLabelColor: 'white',\n    renderYLabel: y => Math.round(y),\n  },\n  yMin: Y_MIN,\n  yMax: Y_MAX,\n  xMin: X_MIN,\n  xMax: X_MAX,\n}\n\nfunction getTop(top, padding, height, graph) {\n  return top + padding\n}\n\nfunction getLeft(left, padding, width, graph) {\n  if (left -padding - width <= graph.left) {\n     return left + padding\n  }\n  return left - padding - width\n}\n\nfunction getTransition(left, padding, width, graph) {\n  let transition = ''\n\n  if (left <= graph.left + 2 * (width + padding)) {\n    transition = 'left 0.1s'\n  }\n\n  return transition\n}\n\nclass ClusterControllerGraph extends Component {\n  // TODO\n  static propTypes = {\n  }\n\n  static defaultProps = {\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      loading: true,\n      error: \"\",\n      data: {\n        count: 0,\n        data: [],\n        xMin: 0,\n        xMax: 0,\n        yMax: 0,\n        yMin: 0,\n      },\n      mouseX: undefined,\n      mouseY: undefined,\n      point: undefined,\n    }\n  }\n\n  fetchEnergyLogs = async () => {\n    const LIMIT = 2000\n\n    this.setState({\n      loading: true,\n    })\n\n    try {\n      const {count, data} = await api.getEnergyLogs({\n        where: {\n          plantId: this.props.plantId,\n          model: \"Cluster Controller\",\n        },\n        limit: LIMIT,\n      })\n\n      const xMin = data.slice(-1)[0].unixTime\n      const xMax = data[0].unixTime\n\n      const yMax = Math.max(...data.map(d => d.energy))\n      const yMin = Math.min(...data.map(d => d.energy))\n\n      const xInterval = Math.floor((xMax - xMin) / 7)\n      const yInterval = Math.floor((yMax - yMin) / 10)\n\n      const lineData = data.map(d => ({\n        x: d.unixTime,\n        y: d.energy\n      })).reverse()\n\n      this.setState({\n        loading: false,\n        data: {\n          count,\n          data: lineData,\n          xMin,\n          xMax,\n          yMax,\n          yMin,\n          xInterval,\n          yInterval,\n        }\n      })\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error\n      })\n    }\n  }\n\n  componentDidMount() {\n    this.fetchEnergyLogs()\n  }\n\n  onMouseMove = (e, mouse) => {\n    const {\n      xMax,\n      xMin,\n    } = this.state.data\n\n    const graph = GRAPH_PROPS.graph\n\n    if (canvas.ui.isInsideRect(mouse, graph)) {\n      const x = canvas.math.linear({\n        dy: xMax - xMin,\n        dx: graph.width,\n        y0: xMin,\n      })(mouse.x - graph.left)\n\n      const data = canvas.math.getNearestDataAtX(x, this.state.data.data)\n\n      this.setState((state) => ({\n        mouseX: mouse.x,\n        mouseY: mouse.y,\n        point: data,\n      }))\n    } else {\n      this.setState((state) => ({\n        mouseX: undefined,\n        mouseY: undefined,\n        point: undefined,\n      }))\n    }\n  }\n\n  onMouseOut = (e, mouse) => {\n    this.setState((state) => ({\n      mouseX: undefined,\n      mouseY: undefined,\n      point: undefined,\n    }))\n  }\n\n  render() {\n    const {\n      xMin,\n      xMax,\n      yMin,\n      yMax,\n      xInterval,\n      yInterval\n    } = this.state.data\n\n    if (this.state.error) {\n      return (\n        <Segment color=\"red\" inverted>\n          <p>{`${this.state.error}`}</p>\n        </Segment>\n      )\n    }\n\n    return (\n      <div style={{\n        position: 'relative',\n        width: '100%',\n        height: '100%'\n      }}>\n        <Segment loading={this.state.loading}>\n          <h4>Energy (kwh) {this.state.data.data.length} data points</h4>\n          {this.state.data.data.length > 0 ? (\n            <div>\n              <LineGraph\n                lines={[this.state.data.data]}\n                lineColors={[\"orange\"]}\n                xMin={this.state.data.xMin}\n                xMax={this.state.data.xMax}\n                yMin={this.state.data.yMin}\n                yMax={this.state.data.yMax}\n                xInterval={this.state.data.xInterval}\n                yInterval={this.state.data.yInterval}\n                drawUI={(ctx, mouse) => {\n                  canvas.ui.draw(ctx, {\n                    ...GRAPH_PROPS,\n                    mouse,\n                    xMin,\n                    xMax,\n                    yMin,\n                    yMax,\n                  })\n\n                  if (this.state.point) {\n                    canvas.line.drawPointAt(ctx, {\n                      ...GRAPH_PROPS,\n                      mouse: mouse,\n                      x: this.state.point.x,\n                      y: this.state.point.y,\n                      radius: 10,\n                      ambientColor: 'rgba(255, 255, 0, 0.5)',\n                      color: 'orange',\n                      borderColor: 'white',\n                      xMin,\n                      xMax,\n                      yMin,\n                      yMax,\n                    })\n                  }\n                }}\n                onMouseMove={this.onMouseMove}\n                onMouseOut={this.onMouseOut}\n              />\n              {this.state.point && (\n                <div\n                  style={{\n                    position: 'absolute',\n                    width: 150,\n                    height: 50,\n                    top: getTop(this.state.mouseY, 70, 50, GRAPH_PROPS.graph),\n                    left: getLeft(this.state.mouseX, 10, 150, GRAPH_PROPS.graph),\n                    transition: getTransition(this.state.mouseX, 10, 150, GRAPH_PROPS.graph),\n                    zIndex: 3,\n                    border: '1px solid black',\n                    backgroundColor: 'rgba(255, 255, 255, 0.9)',\n                    padding: 5,\n                  }}\n                >\n                  <div>\n                    {util.formatDate(this.state.point.x)}\n                  </div>\n                  <div>\n                    {this.state.point.y} kwh\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : <div>No data</div>}\n        </Segment>\n      </div>\n    )\n  }\n}\n\nexport default ClusterControllerGraph\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass LabelColors extends Component {\n  static propTypes = {\n    colors: PropTypes.arrayOf(PropTypes.string).isRequired,\n    labels: PropTypes.arrayOf(PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ])).isRequired,\n  }\n\n  static defaultProps = {\n    colors: [],\n    labels: [],\n  }\n\n  render() {\n    return (\n      <div style={{\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n      }}>\n        {this.props.labels.map(((label, i) => (\n          <div key={i} style={{\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center'\n          }}>\n            <div style={{\n              width: 10,\n              height: 10,\n              margin: 5,\n              backgroundColor: this.props.colors[i],\n            }}>\n            </div>\n            <div>{label}</div>\n          </div>\n        )))}\n      </div>\n    )\n  }\n}\n\nexport default LabelColors\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Segment } from 'semantic-ui-react'\nimport {canvas} from 'react-canvas-graph'\nimport LineGraph from './line-graph'\nimport LabelColors from './label-colors'\nimport * as api from '../api'\nimport * as util from '../util'\n\nconst LINE_COLORS = [\n  \"olive\",\n  \"lime\",\n  \"green\",\n  \"aqua\",\n  \"teal\",\n  \"blue\",\n  \"navy\",\n  \"fuchsia\",\n  \"purple\",\n  \"red\",\n  \"orange\",\n  \"yellow\",\n  \"blue\",\n]\n\nconst X_MIN = Number.POSITIVE_INFINITY\nconst X_MAX = Number.NEGATIVE_INFINITY\nconst Y_MIN = Number.POSITIVE_INFINITY\nconst Y_MAX = Number.NEGATIVE_INFINITY\n\nconst GRAPH_PROPS = {\n  canvas: {\n    width: 900,\n    height: 300,\n    backgroundColor: \"white\"\n  },\n  background: {\n    top: 10,\n    left: 10,\n    width: 880,\n    height: 280,\n    backgroundColor: 'white',\n\n    showYLabel: true,\n    showYLine: true,\n    yLineWidth: 1,\n    yLineColor: 'grey',\n    yAxisAt: 'left',\n    yAxisWidth: 50,\n    yLabelFont: '12px Arial',\n    yLabelColor: 'black',\n    renderYLabel: y => Math.round(y),\n    yInterval: 1,\n\n    showXLabel: true,\n    showXLine: true,\n    xLineWidth: 1,\n    xLineColor: 'grey',\n    xAxisAt: 'bottom',\n    xAxisHeight: 50,\n    xLabelFont: '12px Arial',\n    xLabelColor: 'black',\n    renderXLabel: x => util.formatDate(x),\n    xInterval: 1\n  },\n  graph: {\n     left: 60,\n     top: 10,\n     width: 830,\n     height: 230,\n  },\n  line: {\n    color: 'orange',\n    width: 2\n  },\n  ui: {\n    showXLabel: true,\n    showXLine: true,\n    xLineColor: 'green',\n    xLabelAt: 'bottom',\n    xLabelWidth: 110,\n    xLabelHeight: 20,\n    xLabelBackgroundColor: 'black',\n    xLabelFont: '12px Arial',\n    xLabelColor: 'white',\n    renderXLabel: x => util.formatDate(x),\n\n    showYLabel: true,\n    showYLine: true,\n    yLineColor: 'green',\n    yLabelAt: 'left',\n    yLabelWidth: 50,\n    yLabelHeight: 20,\n    yLabelBackgroundColor: 'black',\n    yLabelFont: '12px Arial',\n    yLabelColor: 'white',\n    renderYLabel: y => Math.round(y),\n  },\n  yMin: Y_MIN,\n  yMax: Y_MAX,\n  xMin: X_MIN,\n  xMax: X_MAX,\n}\n\nclass InverterGraph extends Component {\n  static propTypes = {\n  }\n\n  static defaultProps = {\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      loading: true,\n      error: \"\",\n      graph: {\n        energy: {\n          lines: [],\n          points: [],\n          xMin: X_MIN,\n          xMax: X_MAX,\n          xInterval: 1,\n          yMin: Y_MIN,\n          yMax: Y_MAX,\n          yInterval: 1,\n        },\n        power: {\n          lines: [],\n          points: [],\n          xMin: X_MIN,\n          xMax: X_MAX,\n          xInterval: 1,\n          yMin: Y_MIN,\n          yMax: Y_MAX,\n          yInterval: 1,\n        },\n        current: {\n          lines: [],\n          points: [],\n          xMin: X_MIN,\n          xMax: X_MAX,\n          xInterval: 1,\n          yMin: Y_MIN,\n          yMax: Y_MAX,\n          yInterval: 1,\n        },\n        voltage: {\n          lines: [],\n          points: [],\n          xMin: X_MIN,\n          xMax: X_MAX,\n          xInterval: 1,\n          yMin: Y_MIN,\n          yMax: Y_MAX,\n          yInterval: 1,\n        },\n      },\n    }\n  }\n\n  fetchEnergyLogs = async () => {\n    this.setState(state => ({\n      loading: true,\n    }))\n\n    try {\n      const LIMIT = 600\n\n      const {plantId, devices} = this.props\n      let graph = {\n        energy: { lines: [] },\n        power: { lines: [] },\n        current: { lines: [] },\n        voltage: { lines: [] },\n      }\n\n      for (let device of devices) {\n        const {count, data} = await api.getEnergyLogs({\n          where: {\n            plantId,\n            model: device.model,\n            deviceId: device.id,\n          },\n          limit: LIMIT,\n        })\n\n        // data must by ordered by unix time ascending\n        data.reverse()\n\n        const energy = []\n        const power = []\n        const current = []\n        const voltage = []\n\n        for (let d of data) {\n          energy.push({\n            x: d.unixTime,\n            y: d.energy\n          })\n          power.push({\n            x: d.unixTime,\n            y: d.power\n          })\n          current.push({\n            x: d.unixTime,\n            y: d.current\n          })\n          voltage.push({\n            x: d.unixTime,\n            y: d.voltage\n          })\n        }\n\n        graph.energy.lines.push(energy)\n        graph.power.lines.push(power)\n        graph.current.lines.push(current)\n        graph.voltage.lines.push(voltage)\n      }\n\n      for (let [key, val] of Object.entries(graph)) {\n        const {lines} = val\n\n        let xMin = X_MIN\n        let xMax = X_MAX\n\n        for (let l of lines) {\n          xMin = Math.min(xMin, l[0].x)\n          xMax = Math.max(xMax, l.slice(-1)[0].x)\n        }\n\n        let yMin = Y_MIN\n        let yMax = Y_MAX\n\n        for (let l of lines) {\n          yMin = Math.min(yMin, ...l.map(d => d.y))\n          yMax = Math.max(yMax, ...l.map(d => d.y))\n        }\n\n        const xInterval = Math.floor((xMax - xMin) / 7)\n        const yInterval = Math.floor((yMax - yMin) / 10)\n\n        graph[key] = {\n          ...this.state.graph[key],\n          ...graph[key],\n          xMin,\n          xMax,\n          yMin,\n          yMax,\n          xInterval,\n          yInterval\n        }\n      }\n\n      this.setState(state => ({\n        loading: false,\n        graph,\n      }))\n    } catch(error) {\n      this.setState(state => ({\n        loading: false,\n        error\n      }))\n    }\n  }\n\n  componentDidMount() {\n    this.fetchEnergyLogs()\n  }\n\n  onMouseMove = (e, mouse, graphKey) => {\n    const {\n      xMin,\n      xMax,\n      lines\n    } = this.state.graph[graphKey]\n\n    const graph = GRAPH_PROPS.graph\n\n    if (canvas.ui.isInsideRect(mouse, graph)) {\n      const x = canvas.math.linear({\n        dy: xMax - xMin,\n        dx: graph.width,\n        y0: xMin,\n      })(mouse.x - graph.left)\n\n      const points = lines.map(line => canvas.math.getNearestDataAtX(x, line))\n\n      this.setState((state) => ({\n        graph: {\n          ...state.graph,\n          [graphKey]: {\n            ...state.graph[graphKey],\n            points,\n          }\n        }\n      }))\n    } else {\n      this.setState((state) => ({\n        graph: {\n          ...state.graph,\n          [graphKey]: {\n            ...state.graph[graphKey],\n            points: [],\n          }\n        }\n      }))\n    }\n  }\n\n  onMouseOut = (e, mouse, graphKey) => {\n    this.setState((state) => ({\n        graph: {\n          ...state.graph,\n          [graphKey]: {\n            ...state.graph[graphKey],\n            points: [],\n          }\n        }\n    }))\n  }\n\n  render() {\n    if (this.state.error) {\n      return (\n        <Segment color=\"red\" inverted>\n          <p>{`${this.state.error}`}</p>\n        </Segment>\n      )\n    }\n\n    const deviceIds = this.props.devices.map(d => d.id)\n\n    return (\n      <div style={{\n        position: 'relative',\n        width: '100%',\n        height: '100%'\n      }}>\n        <Segment loading={this.state.loading}>\n          <h4>Energy</h4>\n          {this.state.graph.energy.lines.length > 0 && (\n            <div>\n              <LineGraph\n                lines={this.state.graph.energy.lines}\n                lineColors={LINE_COLORS}\n                xMin={this.state.graph.energy.xMin}\n                xMax={this.state.graph.energy.xMax}\n                yMin={this.state.graph.energy.yMin}\n                yMax={this.state.graph.energy.yMax}\n                xInterval={this.state.graph.energy.xInterval}\n                yInterval={this.state.graph.energy.yInterval}\n                drawUI={(ctx, mouse) => {\n                  canvas.ui.draw(ctx, {\n                    ...GRAPH_PROPS,\n                    mouse,\n                    xMin: this.state.graph.energy.xMin,\n                    xMax: this.state.graph.energy.xMax,\n                    yMin: this.state.graph.energy.yMin,\n                    yMax: this.state.graph.energy.yMax,\n                  })\n\n                  for (let i = 0; i < this.state.graph.energy.points.length; i++) {\n                    const point = this.state.graph.energy.points[i]\n\n                    canvas.line.drawPointAt(ctx, {\n                      ...GRAPH_PROPS,\n                      mouse: mouse,\n                      x: point.x,\n                      y: point.y,\n                      radius: 0,\n                      ambientColor: 'rgba(255, 255, 0, 0.5)',\n                      color: LINE_COLORS[i],\n                      borderColor: 'white',\n                      xMin: this.state.graph.energy.xMin,\n                      xMax: this.state.graph.energy.xMax,\n                      yMin: this.state.graph.energy.yMin,\n                      yMax: this.state.graph.energy.yMax,\n                    })\n                  }\n                }}\n                onMouseMove={(e, mouse) => this.onMouseMove(e, mouse, \"energy\")}\n                onMouseOut={(e, mouse) => this.onMouseOut(e, mouse, \"energy\")}\n              />\n              <LabelColors colors={LINE_COLORS} labels={deviceIds} />\n              {this.state.graph.energy.points.length > 0 && (\n                <LabelColors\n                  colors={LINE_COLORS}\n                  labels={this.state.graph.energy.points.map(d => d.y)}\n                />\n              )}\n            </div>\n          )}\n          <h4>Power (watts)</h4>\n          {this.state.graph.power.lines.length > 0 && (\n            <div>\n              <LineGraph\n                lines={this.state.graph.power.lines}\n                lineColors={LINE_COLORS}\n                xMin={this.state.graph.power.xMin}\n                xMax={this.state.graph.power.xMax}\n                yMin={this.state.graph.power.yMin}\n                yMax={this.state.graph.power.yMax}\n                xInterval={this.state.graph.power.xInterval}\n                yInterval={this.state.graph.power.yInterval}\n                drawUI={(ctx, mouse) => {\n                  canvas.ui.draw(ctx, {\n                    ...GRAPH_PROPS,\n                    mouse,\n                    xMin: this.state.graph.power.xMin,\n                    xMax: this.state.graph.power.xMax,\n                    yMin: this.state.graph.power.yMin,\n                    yMax: this.state.graph.power.yMax,\n                  })\n\n                  for (let i = 0; i < this.state.graph.power.points.length; i++) {\n                    const point = this.state.graph.power.points[i]\n\n                    canvas.line.drawPointAt(ctx, {\n                      ...GRAPH_PROPS,\n                      mouse: mouse,\n                      x: point.x,\n                      y: point.y,\n                      radius: 0,\n                      ambientColor: 'rgba(255, 255, 0, 0.5)',\n                      color: LINE_COLORS[i],\n                      borderColor: 'white',\n                      xMin: this.state.graph.power.xMin,\n                      xMax: this.state.graph.power.xMax,\n                      yMin: this.state.graph.power.yMin,\n                      yMax: this.state.graph.power.yMax,\n                    })\n                  }\n                }}\n                onMouseMove={(e, mouse) => this.onMouseMove(e, mouse, \"power\")}\n                onMouseOut={(e, mouse) => this.onMouseOut(e, mouse, \"power\")}\n              />\n              <LabelColors colors={LINE_COLORS} labels={deviceIds} />\n              {this.state.graph.power.points.length > 0 && (\n                <LabelColors\n                  colors={LINE_COLORS}\n                  labels={this.state.graph.power.points.map(d => d.y)}\n                />\n              )}\n            </div>\n          )}\n\n          <h4>Current</h4>\n          {this.state.graph.current.lines.length > 0 && (\n            <div>\n              <LineGraph\n                lines={this.state.graph.current.lines}\n                lineColors={LINE_COLORS}\n                xMin={this.state.graph.current.xMin}\n                xMax={this.state.graph.current.xMax}\n                yMin={this.state.graph.current.yMin}\n                yMax={this.state.graph.current.yMax}\n                xInterval={this.state.graph.current.xInterval}\n                yInterval={this.state.graph.current.yInterval}\n                drawUI={(ctx, mouse) => {\n                  canvas.ui.draw(ctx, {\n                    ...GRAPH_PROPS,\n                    mouse,\n                    xMin: this.state.graph.current.xMin,\n                    xMax: this.state.graph.current.xMax,\n                    yMin: this.state.graph.current.yMin,\n                    yMax: this.state.graph.current.yMax,\n                  })\n\n                  for (let i = 0; i < this.state.graph.current.points.length; i++) {\n                    const point = this.state.graph.current.points[i]\n\n                    canvas.line.drawPointAt(ctx, {\n                      ...GRAPH_PROPS,\n                      mouse: mouse,\n                      x: point.x,\n                      y: point.y,\n                      radius: 0,\n                      ambientColor: 'rgba(255, 255, 0, 0.5)',\n                      color: LINE_COLORS[i],\n                      borderColor: 'white',\n                      xMin: this.state.graph.current.xMin,\n                      xMax: this.state.graph.current.xMax,\n                      yMin: this.state.graph.current.yMin,\n                      yMax: this.state.graph.current.yMax,\n                    })\n                  }\n                }}\n                onMouseMove={(e, mouse) => this.onMouseMove(e, mouse, \"current\")}\n                onMouseOut={(e, mouse) => this.onMouseOut(e, mouse, \"current\")}\n              />\n              <LabelColors colors={LINE_COLORS} labels={deviceIds} />\n              {this.state.graph.current.points.length > 0 && (\n                <LabelColors\n                  colors={LINE_COLORS}\n                  labels={this.state.graph.current.points.map(d => d.y)}\n                />\n              )}\n            </div>\n          )}\n\n          <h4>Voltage</h4>\n          {this.state.graph.voltage.lines.length > 0 && (\n            <div>\n              <LineGraph\n                lines={this.state.graph.voltage.lines}\n                lineColors={LINE_COLORS}\n                xMin={this.state.graph.voltage.xMin}\n                xMax={this.state.graph.voltage.xMax}\n                yMin={this.state.graph.voltage.yMin}\n                yMax={this.state.graph.voltage.yMax}\n                xInterval={this.state.graph.voltage.xInterval}\n                yInterval={this.state.graph.voltage.yInterval}\n                drawUI={(ctx, mouse) => {\n                  canvas.ui.draw(ctx, {\n                    ...GRAPH_PROPS,\n                    mouse,\n                    xMin: this.state.graph.voltage.xMin,\n                    xMax: this.state.graph.voltage.xMax,\n                    yMin: this.state.graph.voltage.yMin,\n                    yMax: this.state.graph.voltage.yMax,\n                  })\n\n                  for (let i = 0; i < this.state.graph.voltage.points.length; i++) {\n                    const point = this.state.graph.voltage.points[i]\n\n                    canvas.line.drawPointAt(ctx, {\n                      ...GRAPH_PROPS,\n                      mouse: mouse,\n                      x: point.x,\n                      y: point.y,\n                      radius: 0,\n                      ambientColor: 'rgba(255, 255, 0, 0.5)',\n                      color: LINE_COLORS[i],\n                      borderColor: 'white',\n                      xMin: this.state.graph.voltage.xMin,\n                      xMax: this.state.graph.voltage.xMax,\n                      yMin: this.state.graph.voltage.yMin,\n                      yMax: this.state.graph.voltage.yMax,\n                    })\n                  }\n                }}\n                onMouseMove={(e, mouse) => this.onMouseMove(e, mouse, \"voltage\")}\n                onMouseOut={(e, mouse) => this.onMouseOut(e, mouse, \"voltage\")}\n              />\n              <LabelColors colors={LINE_COLORS} labels={deviceIds} />\n              {this.state.graph.voltage.points.length > 0 && (\n                <LabelColors\n                  colors={LINE_COLORS}\n                  labels={this.state.graph.voltage.points.map(d => d.y)}\n                />\n              )}\n            </div>\n          )}\n        </Segment>\n      </div>\n    )\n  }\n}\n\nexport default InverterGraph\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {List, Button} from 'semantic-ui-react'\nimport createQuery from './create-query'\nimport Loading from './loading'\nimport ClusterControllerGraph from './cluster-controller-graph'\nimport InverterGraph from './inverter-graph'\nimport * as api from '../api'\n\nclass PowerPlant extends Component {\n  static propTypes = {\n    query: PropTypes.shape({\n      loading: PropTypes.bool.isRequired,\n      error: PropTypes.string.isRequired,\n      response: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        devices: PropTypes.arrayOf(PropTypes.shape({\n          id: PropTypes.string.isRequired,\n          model: PropTypes.string.isRequired,\n        }))\n      })\n    }).isRequired,\n    fetch: PropTypes.func.isRequired,\n    history: PropTypes.shape({\n      push: PropTypes.func.isRequired,\n    }),\n    match: PropTypes.shape({\n      params: PropTypes.shape({\n        plantId: PropTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }\n\n  static defaultProps = {\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      showDevices: false,\n    }\n  }\n\n  toggleShowDevices = (e) => {\n    e.preventDefault()\n\n    this.setState(state => ({\n      showDevices: !state.showDevices\n    }))\n  }\n\n  render() {\n    const {response} = this.props.query\n\n    return (\n      <Loading {...this.props.query} onRetry={this.props.fetch}>\n        <div>\n          {response ? (\n            <div>\n              <h2>Plant {response.id}</h2>\n              <div style={{\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'center',\n              }}>\n                <h3 style={{padding: 0, margin: 5}}>Devices ({response.devices.length})</h3>\n                <Button\n                  basic\n                  color=\"blue\"\n                  size=\"mini\"\n                  onClick={this.toggleShowDevices}\n                >\n                  {this.state.showDevices ? \"Hide\" : \"Show\"}\n                </Button>\n              </div>\n\n              {this.state.showDevices && (\n                <List>\n                  {response.devices.map((device, i) => (\n                    <List.Item key={i}>\n                      <List.Content>\n                        <List.Header>\n                          {device.model} - {device.id}\n                        </List.Header>\n                      </List.Content>\n                    </List.Item>\n                  ))}\n                </List>\n              )}\n\n              <h3>Cluster Controller</h3>\n              <ClusterControllerGraph plantId={response.id} />\n\n              <h3>Inverters</h3>\n              <InverterGraph\n                plantId={response.id}\n                devices={response.devices.filter(d => d.model != \"Cluster Controller\")}\n              />\n            </div>\n          ) : <div>Not Found</div>}\n        </div>\n      </Loading>\n    )\n  }\n}\n\nexport default createQuery(\n  props => api.getPowerPlant(props.match.params.plantId)\n)(PowerPlant)\n","import React, { Component } from 'react'\nimport {Route, Switch} from 'react-router-dom'\nimport {Container} from 'semantic-ui-react'\nimport PowerPlants from './components/power-plants'\nimport PowerPlant from './components/power-plant'\n\nconst NotFound = () => (\n  <h1>Not Found</h1>\n)\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <div style={{paddingTop: 10}} />\n        <h5>Time zone: {process.env.REACT_APP_TIME_ZONE}</h5>\n\n        <Switch>\n          <Route path=\"/plants/:plantId\" component={PowerPlant} />\n          <Route exact path=\"/\" component={PowerPlants} />\n          <Route component={NotFound} />\n        </Switch>\n\n        <div style={{paddingBottom: 30}} />\n      </Container>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css'\nimport App from './app'\nimport registerServiceWorker from './registerServiceWorker'\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n)\nregisterServiceWorker()\n"],"sourceRoot":""}